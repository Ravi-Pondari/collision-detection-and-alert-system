/*   Note: 
A debug script for CAN debugging & simulation using Keil IDE. 
Can be used for representing a CAN NODE connected to the bus which sends 
CAN(Standard Data/Remote) frame . 
 */ 
 DEFINE BUTTON "DF1","Send2CAN1(1,0,8,'A','B','C','D','E','F','G','H','I')"
 DEFINE BUTTON "RF1","Send2CAN1(1,1,1,0,0,0,0,0,0,0,0)"
 func void Send2CAN1 (unsigned int id,
	                   unsigned char frameType,
										 unsigned char msgLen,
										 unsigned char byte0,
										 unsigned char byte1,
										 unsigned char byte2,
										 unsigned char byte3, 	 
										 unsigned char byte4,
										 unsigned char byte5,
										 unsigned char byte6,
										 unsigned char byte7
										)
{
CAN1L=msgLen;//Length of the CAN message
if(frameType==0)
{
	switch(msgLen)
	{
		case 1:CAN1B0=byte0;break;
		case 2:CAN1B0=byte0;CAN1B1=byte1;break;
		case 3:CAN1B0=byte0;CAN1B1=byte1;CAN1B2=byte2;break;
		case 4:CAN1B0=byte0;CAN1B1=byte1;CAN1B2=byte2;CAN1B3=byte3;break;
		case 5:
					CAN1B0=byte0;CAN1B1=byte1;CAN1B2=byte2;CAN1B3=byte3;CAN1B4=byte4;
					break;
		case 6:
				CAN1B0=byte0;CAN1B1=byte1;CAN1B2=byte2;CAN1B3=byte3;CAN1B4=byte4;
					 CAN1B5=byte5;	break;
		case 7:
					CAN1B0=byte0;CAN1B1=byte1;CAN1B2=byte2;CAN1B3=byte3;CAN1B4=byte4;
					 CAN1B5=byte5;	CAN1B6=byte6;break;
		case 8:
					CAN1B0=byte0;CAN1B1=byte1;CAN1B2=byte2;CAN1B3=byte3;CAN1B4=byte4;
					 CAN1B5=byte5;CAN1B6=byte6;CAN1B7=byte7;break;
	}
}	
CAN1ID=id;//send CAN 11 bit ID
if(frameType==0)
	CAN1IN=1;//standard data frame
if(frameType==1)
	CAN1IN=0;//standard remote frame
CAN1IN=5;//starts bus activity

}
